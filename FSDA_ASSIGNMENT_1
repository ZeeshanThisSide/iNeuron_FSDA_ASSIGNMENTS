--ASSIGNMENT_DOC - https://docs.google.com/document/d/1Pk6tVM3wlc484EXx1lqiWgRoBq-a9Nlb/edit


CREATE DATABASE ASSIGNMENT_1;

USE ASSIGNMENT_1;
--TASK 1
--Write an SQL query that, for each 'product', returns the total amount of money spent on it. 
--Rows should be arranged in decending alphabetical order of 'product'.

CREATE OR REPLACE TABLE SHOPPING_HISTORY(
PRODUCT VARCHAR(100) NOT NULL,
QUANTITY INT NOT NULL,
UNIT_PRICE INT NOT NULL);

INSERT INTO SHOPPING_HISTORY VALUES 
('BREAD', 4, 12),
('MILK', 2, 28),
('CHOCOLATE', 5, 10),
('BISCUIT', 6, 5),
('CAKE', 2, 30),
('BREAD', 2, 15),
('MILK', 5, 25),
('CHOCOLATE', 12, 9),
('BREAD', 10, 10),
('CAKE', 5, 28);

SELECT * FROM SHOPPING_HISTORY;

SELECT DISTINCT PRODUCT, SUM(QUANTITY*UNIT_PRICE) AS TOTAL_PRICE
FROM SHOPPING_HISTORY
GROUP BY PRODUCT
ORDER BY PRODUCT DESC;





--TASK 2

CREATE OR REPLACE TABLE PHONES(
NAME VARCHAR(100) NOT NULL UNIQUE,
PHONE_NUMBER INTEGER NOT NULL UNIQUE);

INSERT INTO PHONES VALUES
('RAJ', 4576),
('AJIT', 8790),
('NEHA', 5142),
('WASIM', 7936),
('ANKIT', 5810),
('SANJAY',8013),
('SUMAN', 4703);

SELECT * FROM PHONES;

CREATE OR REPLACE TABLE CALLS(
ID INTEGER NOT NULL,
CALLER INTEGER NOT NULL,
CALLEE INTEGER NOT NULL,
DURATION INTEGER NOT NULL,
UNIQUE(ID));

INSERT INTO CALLS VALUES
(14, 8790, 4590, 6),
(7, 4576, 2222, 5),
(5, 7936, 5555, 4),
(19, 5810, 7209, 4),
(23, 8013, 9143, 3),
(4, 8790, 1234, 2),
(6, 5142, 3941, 7),
(3, 8013, 7381, 4),
(16, 5142, 6052, 5),
(8, 7936, 9837, 7),
(9, 8790, 1111, 8),
(27, 4703, 8961, 5),
(29, 4703, 9907, 3),
(5, 4576, 8907, 3),
(15, 5810, 7911, 4),
(1, 4703, 9830, 7),
(2, 5142, 5041, 8);

SELECT * FROM CALLS;

--SOLUTION USING SUBQUERY

SELECT NAME 
FROM (SELECT NAME, SUM(DURATION) AS TOTAL_DURATION
FROM CALLS C INNER JOIN PHONES P ON P.PHONE_NUMBER=C.CALLER
GROUP BY NAME)
WHERE TOTAL_DURATION >=10;

--SOLUTION USING CTE

WITH FINAL AS (SELECT NAME, SUM(DURATION) AS TOTAL_DURATION
FROM CALLS C INNER JOIN PHONES P ON P.PHONE_NUMBER=C.CALLER
GROUP BY NAME)
SELECT NAME
FROM FINAL
WHERE TOTAL_DURATION >=10;

--TASK 3

CREATE OR REPLACE TABLE TRANSACTIONS(
AMOUNT INTEGER NOT NULL,
DATE DATE NOT NULL);

--TEST TABLE 1

INSERT INTO TRANSACTIONS VALUES (1000, '2020-01-06'), (-10, '2020-01-14'), (-75, '2020-01-20'), (-5, '2020-01-25'),
(-4, '2020-01-29'), (2000, '2020-03-10'), (-75, '2020-03-12'), (-20, '2020-03-15'), (40, '2020-03-15'),
(-50, '2020-03-17'), (200, '2020-10-10'), (-200, '2020-10-10');

--TEST TABLE 2

INSERT INTO TRANSACTIONS VALUES (1, '2020-06-29'), (35, '2020-02-20'), (-50, '2020-02-03'),
(-1, '2020-02-26'), (-200, '2020-08-01'), (-44, '2020-02-27'), (-5, '2020-02-25'), (1, '2020-06-29'), (1, '2020-06-29'),
(-100, '2020-12-29'), (-100, '2020-12-31'), (-100, '2020-12-31');


SELECT * FROM TRANSACTIONS;


SELECT SUM(NET_CREDIT) - 5*(12-COUNT_IF(TOTAL <= -100 AND TRX_COUNT >=3)) AS BALANCE
FROM
(SELECT MONTHNAME(DATE) AS MON, SUM(AMOUNT) AS NET_CREDIT
FROM TRANSACTIONS
GROUP BY MON) AS POSITIVE
LEFT OUTER JOIN 
(SELECT MONTHNAME(DATE) AS MON,SUM(AMOUNT) AS TOTAL, COUNT_IF(AMOUNT<0) AS TRX_COUNT
FROM TRANSACTIONS WHERE AMOUNT<0 
GROUP BY MON) AS NEGATIVE
ON POSITIVE.MON=NEGATIVE.MON;


